Singleton Pattern belongs to Creational Type Pattern

This Pattern is used when we need to ensure that only one object of a particular class need to be created.
Singleton is like a single resource which is being shared among multiple users; for example - sharing a single washing machine among all the residents in a hotel or sharing a single appliance like refrigerator among all the family members.

From Wikipedia, "The singleton pattern is a software design pattern that restricts the instantiation of a class to one object.‚Äù

I would rather say that singleton pattern ensures that single instance of a class is created and shared among all other objects in an application.

Advantages of Singleton
- Singleton controls concurrent access to the resource
- It ensures there is only one object available across the application in a controlled state.

Implementation Guidelines
- Ensure that only one instance of the class exists
- Provide global access to that instance by
  - Declaring all constructors of the class to be private
  - Providing static method that returns a reference to the instance
  - The instance is stored as a private static variable

Why need sealed class when we already using private constructor?
Private constructor helps in preventing any external instantiation of object but sealed will prevent Inheritance. 
When we don't make our class sealed. It is possible to create object within the class and create an instance. With this we will be violating the principle of Singleton

Double check locking: https://en.wikipedia.org/wiki/Double-checked_locking

Lazy Loading vs Eager Initialization

Lazy Loading
 - Improves the performance
 - Avoids unnecessary load till the point object is accessed
 - Reduces the memory footprint on the start up
 - Faster application load

Eager Loading or Non Lazy Loading
 - Preinstantiation of the object
 - Commonly used in lower memory footprints

Lazy Initializaion : https://weblogs.asp.net/morteza/Why_and_how_to_use_lazy_initialization_in_Csharp_using_LazyT_API



